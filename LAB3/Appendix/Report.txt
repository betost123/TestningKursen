Q1:

1. Start. By executing backwards. 0 <= y has the fewest restrictions on input state. 
2. We apply rule: Weakest precondition calculus Conditional wp(if x <0 then y := -x else y := x, y) = (By Conditional rule) (x<0 -> wp(y:=-x, y)) && (¬(x<0) -> wp(y:=x, y))= (By Assignment rule) ((x<0 -> -x<0) && (¬(x<0) -> x<0) = true

Q2:
1. The program is not verifiable because if x and y are the same, you can’t guarantee that one is bigger than the other, obviously.
2. wp(S,R) conditional proof wp(if x>y then big := x small := y else big := x small := y, big > small) = (By conditional rule) (x>y -> wp(big := x small := y, big>small)) && (!(x>y) -> wp(big := x small := y, big>small)) = (By assignment rule) (x>y -> x>yl) && (!(x>y) -> x<y) = false

//1.
method Q2(x : int, y : int) returns (big : int, small : int) 
  requires x != y;
  ensures big > small;
{
  if (x > y)
   {big, small := x, y;}
  else
   {big, small := y, x;}
}

//2.
method Q2(x : int, y : int) returns (big : int, small : int) 
  ensures big >= small;
{
  if (x > y)
   {big, small := x, y;}
  else 
   {big, small := y, x;}
}

Q3. 
1. We can’t use the inputs directly since it’s missing a specification. For example: 
requires n0 != null && m0 != null
ensures res == n0*m0

2. The purpose of the method is to multiply m0 with n0.
postcondition: res == n0*m0

3. 
S:	res:=res+m, n:=n-1
S1:	if(n0>=0) then (n,m:=n0,m0) else (Nam:=-n0,-m0)

I:	n0>=0 && n0<0 && 0<n	
true

wp(S1, while(0<n) S)

wp(S1, I) = wp(res:= 0 if(n0>=0) then n:=n0 m:=m0 else n:=-n0 m:=-m0) =
(By sequential rule)
wp(res:=0 wp(if n0>=0 then n:=n0 m:=m0 else n:=-n0 m:=-m0, res:=n0*m0) = 
(By assignment rule)
wp(res:=0,n:=n0 m:=m0 <= n0  < res)
wp(res:=0,n:=-n0 m:=-m0 0 > n0 > res)
True

I==>wp(S,I) -> true==>true = true


Q4. 
1. requires 0 <= m
ensures 1 <= fact(m)
2. Vid 

method ComputeFact(n : nat) returns (res : nat)
  requires n > 0;
  ensures res == fact(n);
 {
  res := 1;
  var i := 2;
  while (i <= n) 
  {
    res := res * i;
    i := i + 1;
  }
 }
